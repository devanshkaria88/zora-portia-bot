"""
Data models for trading signals
"""
from dataclasses import dataclass
from enum import Enum
from typing import Dict, Any, Optional
from datetime import datetime

class SignalType(Enum):
    """Types of trading signals"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"

@dataclass
class Signal:
    """Represents a trading signal generated by a strategy"""
    type: SignalType
    strength: float  # 0.0 to 1.0, indicating confidence
    reason: str
    coin: Any = None
    strategy: str = "Unknown"
    timestamp: datetime = datetime.utcnow()
    
    # Optional fields for backward compatibility
    coin_id: Optional[str] = None
    price: Optional[float] = None
    
    @property
    def signal_type(self) -> SignalType:
        """Alias for type property to maintain API consistency"""
        return self.type
        
    @property
    def confidence(self) -> float:
        """Alias for strength property to maintain API consistency"""
        return self.strength
        
    @property
    def reasoning(self) -> str:
        """Alias for reason property to maintain API consistency"""
        return self.reason
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for API calls"""
        coin_id = self.coin_id or (self.coin.id if hasattr(self.coin, 'id') else None)
        price = self.price or (self.coin.current_price if hasattr(self.coin, 'current_price') else 0)
        
        return {
            "type": self.type.value,
            "coin_id": coin_id,
            "price": price,
            "strength": self.strength,
            "reason": self.reason,
            "strategy": self.strategy,
            "timestamp": self.timestamp.isoformat()
        }
